# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret=">DYvlCr/:R0CUE81d`x0rSKT1>tsZtN=JY@t5sn]hq9wA^s:qm?D5b7axIGJh4Lo"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=

# Default database configuration using H2
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:bid"


# Default database configuration using PostgreSQL database engine
# TODO: Don't forget to change db name
#db.default.url="jdbc:postgresql://localhost/bid_test?user=dev&password=123456"
db.default.driver=org.postgresql.Driver
db.default.url="jdbc:postgresql://localhost:5432/DBforBid?user=postgres&password=ghfdlf"


# MySql test db
#vlad.mysql.url="jdbc:mysql://localhost:3306/bid_test"
#vlad.mysql.user="vlad"
#vlad.mysql.psw="123456"
#vlad.mysql.driver=com.mysql.jdbc.Driver


# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG


# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a 
# pool that has thread-affinity. 
# The higher this number, the better your performance will be for the 
# case when you have plenty of short-lived threads. 
# Beyond a certain threshold, maintenance of these pools will start 
# to have a negative effect on performance (and only for the case 
# when connections on a partition start running out).
db.default.partitionCount=2

# The number of connections to create per partition. Setting this to 
# 5 with 3 partitions means you will have 15 unique connections to the 
# database. Note that BoneCP will not create all these connections in 
# one go but rather start off with minConnectionsPerPartition and 
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=5

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=5


play {
  akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = WARNING
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 50
        }
      }
      application = {
        fork-join-executor {
          parallelism-max = 300
        }
      }
    }
  }
}